# Task1. На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом.
# Определите минимальное число монеток, которые нужно перевернуть,
# чтобы все монетки были повернуты вверх одной и той же стороной.
# Выведите минимальное количество монет, которые нужно перевернуть.
# import random
#
# amount_coins = int(input("Введите количество монет: "))
#
# head = 0
# tail = 0
# coins = []
#
# for i in range(amount_coins):
#     coins.append(random.randint(0, 1))
#     if int(coins[i] == 0):
#         tail += 1
#     else:
#         head += 1
#
# print(coins)
# print(f"Всего монет орлом вверх {head}, решкой вверх {tail}")
#
# if head > tail:
#     res = tail
# else:
#     res = head
#
# print(f"Минимальное кол-во монет, которые нужно перевернуть = {res}")


# Task2. Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать.
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P.
# Помогите Кате отгадать задуманные Петей числа.

# sum = int(input("Ввведите сумму чисел: "))
# product = int(input("Введите произведение чисел: "))
#
# x = (sum + int((sum ** 2 - 4 * product) ** 0.5)) // 2
# y = sum - x
#
# if x <= 1000 or y <= 1000:
#     print(f"Числа задуманные Петей {x, y}")
# else:
#     print("Петя задумал число/числа больше 1000")


# Task3. Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.

# num = int(input("Введите число N: "))
#
# i = 1
# j = 0
#
# while i <= num:
#     print(f"2^{j} = {i}")
#     i *= 2
#     j += 1


# Task4. Посчитать сумму цифр любого целого или вещественного числа. Через строку решать нельзя.

# num = float(input("Введите число: "))
#
# integer = round(num, 3) * 1000
# sum = 0
#
# while integer != 0:
#     digit = integer % 10
#     sum += digit
#     integer = integer // 10
#
# print(sum)


# Task5. Напишите программу для проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.
# теперь надо проверить ее практически
# в цикле 100 раз прогоняем
# каждый раз генерируем случайное количество предикат от 3 до 15
# и конечно со случайным булевым значением
# и засекаем общее время выполнения программы
# юзаем библиотеки random и time
# предикаты НЕ ЗАДАЕМ как целое число!

# import random
# import time
#
# start = time.time()
#
# i = 1
#
# while i <= 100:
#
#     n = int(random.randint(3, 15))
#     def inputNumbers(x):
#         xyz = ["X", "Y", "Z"]
#         a = []
#         for i in range(x):
#             a.append(bool(random.choice([True, False])))
#         return a
#
#     def checkPredicate(x):
#         left = not (x[0] or x[1] or x[2])
#         right = not x[0] and not x[1] and not x[2]
#         result = left == right
#         return result
#
#     statement = inputNumbers(n)
#
#     if checkPredicate(statement) == True:
#         print(f"Утверждение истинно")
#     else:
#         print(f"Утверждение ложно")
#
#     i += 1
#
# end = time.time() - start
#
# print(f"\n{end}")

# Task6. Валентина прогуляла лекцию по математике.
# Преподаватель решил подшутить над нерадивой студенткой и
# попросил ее на практическом занятии перечислить все положительные делители некоторых целых чисел.
# Для несложных примеров студентка быстро нашла решения
# (для числа 6 это: 1, 2, 3, 6; а для числа 16 это: 1, 2, 4, 8, 16), но этим все не закончилось.
# На домашнее задание ей дали варианты посложнее: 23436, 190187200, 380457890232.
#
# Решить такое вручную, как вы понимаете, практически нереально.
# Вот Валентина и обратилась к вам за помощью.
# Помогите ей (при помощи функции all_divisors(number), которую напишете сами).
# Постарайтесь найти самое оптимальное решение.
# Результат представьте в виде списка (не забудьте отсортировать по возрастанию).

# def all_divisors(number):
#
#     sp = [1, number]
#     for i in range(2, 1 + int(number ** 0.5)):
#         if number % i == 0:
#             sp.extend({number // i, i})
#     return sorted(sp)
#
# print(all_divisors(23436))
# print(all_divisors(190187200))
# print(all_divisors(380457890232))